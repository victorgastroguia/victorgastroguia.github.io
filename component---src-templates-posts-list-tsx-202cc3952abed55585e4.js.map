{"version":3,"file":"component---src-templates-posts-list-tsx-202cc3952abed55585e4.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/utils/url-builder.ts","webpack://gatsby-starter-blog/./src/utils/to-url-friendly-text.ts","webpack://gatsby-starter-blog/./src/utils/to-emoji.ts","webpack://gatsby-starter-blog/./src/components/filters-list.tsx","webpack://gatsby-starter-blog/./src/components/collapse.tsx","webpack://gatsby-starter-blog/./src/templates/posts-list.tsx","webpack://gatsby-starter-blog/./src/utils/extract-category-from-slug.ts"],"sourcesContent":["import toUrlFriendlyText from \"./to-url-friendly-text\"\n\n/**\n * Builds URLs.\n */\nexport default class UrlBuilder {\n    /**\n     * Builds a URL to an index of posts of the given category.\n     * @param category Category.\n     * @returns URL.\n     */\n    createCategoryUrl(category: string): string {\n        const sanitized = this.removeBoundsSlashes(category)\n\n        return `/${sanitized}`\n    }\n\n    /**\n     * Builds a URL to an index of food reviews of the given food category.\n     * @param foodCategory Food category.\n     * @returns URL.\n     */\n    createFoodCategoryUrl(foodCategory: string): string {\n        const sanitized = this.removeBoundsSlashes(foodCategory)\n\n        return `/tipus-de-menjar/${sanitized}`\n    }\n\n    /**\n     * Builds a URL to an index of food reviews of restaurants located\n     * in the given neighbourhood.\n     * @param neighbourhood Neighbourhood.\n     * @returns URL.\n     */\n    createNeighbourhoodUrl(neighbourhood: string): string {\n        const sanitized = this.removeBoundsSlashes(neighbourhood)\n\n        return `/barri/${toUrlFriendlyText(sanitized)}`\n    }\n\n    private removeBoundsSlashes(chunk: string): string {\n        let output = chunk\n\n        if (output[0] === \"/\") {\n            output = output.slice(1)\n        }\n\n        if (output[output.length - 1] === \"/\") {\n            output = output.slice(0, -1)\n        }\n\n        return output\n    }\n}","export default function toUrlFriendlyText(text: string): string {\n    return text.normalize()\n        .toLowerCase()\n        .replace(/\\s/g, \"-\")\n}","const keywordToEmojiMap = new Map<string, string>([\n  [\"gastro\", \"🍴\"],\n  [\"llengua\", \"👅\"],\n  [\"llibres\", \"📖\"],\n  [\"software\", \"👨🏻‍💻\"],\n\n  [\"burger\", \"🍔\"],\n  [\"esmorzar\", \"🥖\"],\n  [\"ramen\", \"🍜\"],\n  [\"dolç\", \"🍰\"],\n  [\"sa\", \"🥦\"],\n  [\"pizza\", \"🍕\"],\n  [\"valencià\", \"🥘\"],\n  [\"brunch\", \"🥞\"],\n  [\"sudamericà\", \"🌮\"],\n  [\"fusió\", \"🌍\"],\n  [\"espanyol\", \"🇪🇸\"],\n\n  [\"per emportar\", \"🚴\"]\n])\n\nexport default function toEmoji(keyword: string): string {\n  return keywordToEmojiMap.get(keyword) ?? keyword;\n}\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport toEmoji from \"../utils/to-emoji\"\n\ntype Props = {\n    filters: string[]\n    title: string\n    urlBuilder: (filter: string) => string\n}\n\nconst FiltersList: React.FC<Props> = ({ title, filters, urlBuilder }) => {\n    return (\n        <div className=\"filters-list\">\n            <span className=\"filters-list-title\">{title}:</span>\n            <div className=\"filters\">\n                {\n                    filters.map(c => <Link\n                        to={urlBuilder(c)}\n                        className=\"filter category\">\n                        {toEmoji(c)}\n                    </Link>)\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default FiltersList\n","import * as React from \"react\"\n\ntype Props = React.PropsWithChildren & {\n    titles: [string, string]\n}\n\nconst expandTitleIndex = 0\nconst collapseTitleIndex = 1\n\nconst Collapse: React.FC<Props> = ({ children, titles }) => {\n    const [visible, setVisibility] = React.useState(false)\n\n    return (\n        <div className=\"collapse\">\n            <span onClick={() => setVisibility(!visible)}\n                className=\"collapse-title\">\n                {titles[visible ? collapseTitleIndex : expandTitleIndex]}\n            </span>\n            {visible ? children : null}\n        </div>\n    )\n}\n\nexport default Collapse","import * as React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Seo from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport { Post } from \"../models/post\"\nimport extractCategoryFromSlug from \"../utils/extract-category-from-slug\"\nimport UrlBuilder from \"../utils/url-builder\"\nimport toEmoji from \"../utils/to-emoji\"\nimport FiltersList from \"../components/filters-list\"\nimport Collapse from \"../components/collapse\"\n\nconst takeAway = \"per emportar\"\n\nconst urlBuilder = new UrlBuilder\n\nexport type DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: Post[]\n  }\n}\n\ntype ContextProps = {\n  categoryFolder?: string\n  foodCategory?: string\n  neighbourhood?: string\n}\n\nconst PostsList: React.FC<PageProps<DataProps, ContextProps>> = ({ pageContext, data, location }) => {\n  const {\n    site: { siteMetadata },\n    allMarkdownRemark: { nodes: posts }\n  } = data\n\n  const siteTitle = siteMetadata?.title\n\n  if (!siteTitle) {\n    throw new Error(\"A title is mandatory for every post\")\n  }\n\n  const isFiltered = pageContext.categoryFolder\n    || pageContext.foodCategory\n    || pageContext.neighbourhood\n  const onlyGastroPosts = posts.filter(p => p.fields.slug.includes(\"/gastro/\"))\n  const publishedPosts = process.env.GATSBY_DEBUG\n    ? onlyGastroPosts\n    : onlyGastroPosts.filter(post => !post.fields.slug.includes(\"/drafts/\"))\n\n  const filters = publishedPosts.reduce((filters, { frontmatter: { foodCategory, neighbourhood } }) => {\n\n    if (foodCategory)\n      filters.foodCategories.add(foodCategory)\n    if (neighbourhood)\n      filters.neighbourhoods.add(neighbourhood)\n\n    return filters\n  }, {\n    foodCategories: new Set<string>,\n    neighbourhoods: new Set<string>\n  })\n\n  const neighbourhoods = Array.from(filters.neighbourhoods.values())\n    .sort()\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      {\n        isFiltered\n          ? <div id=\"filter-alert\">\n            <p>\n              ☝️ Estas filtrant per\n              {\" \"}\n              <strong className=\"current-filter\">\n                  {\n                    pageContext.categoryFolder\n                    && pageContext.categoryFolder.slice(1, -1)\n                    || pageContext.foodCategory\n                    || pageContext.neighbourhood\n                  }\n                <Link\n                  to=\"/\"\n                  className=\"clear-filter-btn\"\n                >\n                  ❌\n                </Link>\n              </strong>\n            </p>\n          </div>\n          : <>\n            <Bio />\n            <Collapse titles={[\"➕ Mostra els filtres\", \"➖ Amaga els filtres\"]}>\n              <FiltersList\n                title=\"Tipus de menjar\"\n                filters={Array.from(filters.foodCategories.values())}\n                urlBuilder={f => urlBuilder.createFoodCategoryUrl(f)} />\n              <FiltersList\n                title=\"Ubicació\"\n                filters={neighbourhoods}\n                urlBuilder={f => urlBuilder.createNeighbourhoodUrl(f)} />\n              <br />\n            </Collapse>\n          </>\n      }\n      <ol style={{ listStyle: `none` }}>\n        {publishedPosts.map(({ frontmatter, fields, excerpt }) => {\n          const { slug } = fields\n          const {\n            title = slug,\n            foodCategory,\n            neighbourhood,\n            date,\n            description\n          } = frontmatter\n          const category = extractCategoryFromSlug(slug)\n\n          return (\n            <li key={slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  {\n                    isFiltered\n                      ? null\n                      : <Link\n                        to={urlBuilder.createCategoryUrl(category)}\n                        className=\"filter category\">\n                        {toEmoji(category)}\n                      </Link>\n                  }\n                  {\n                    pageContext.foodCategory || !foodCategory\n                      ? null\n                      : <Link\n                        to={urlBuilder.createFoodCategoryUrl(foodCategory)}\n                        className=\"filter food-category\"\n                      >\n                        {toEmoji(foodCategory)}\n                      </Link>\n                  }\n                  {\n                    pageContext.neighbourhood || !neighbourhood\n                      ? null\n                      : <Link\n                        to={urlBuilder.createNeighbourhoodUrl(neighbourhood)}\n                        className={`filter ${neighbourhood === takeAway ? \"take-away\" : \"neighbourhood\"}`}>\n                        {neighbourhood === takeAway ? \"🚴\" : neighbourhood}\n                      </Link>\n                  }\n                  <h2>\n                    <Link to={slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: description || excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n      {\n        isFiltered\n          ? <footer className=\"filtered-list-footer\">\n            <Bio />\n          </footer>\n          : <></>\n      }\n    </Layout>\n  )\n}\n\nexport default PostsList\n\nexport const Head = () => <Seo title=\"Tots els articles\" />\n\nexport const pageQuery = graphql`\n  query PostsList(\n    $categoryFolder: String\n    $foodCategory: String\n    $neighbourhood: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { \n        fields: { slug: { regex: $categoryFolder } },\n        frontmatter: { \n          foodCategory: { eq: $foodCategory } \n          neighbourhood: { eq: $neighbourhood } \n        }\n      }, \n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\", locale: \"ca\")\n          title\n          description\n          foodCategory\n          neighbourhood\n        }\n      }\n    }\n  }\n`","export default function extractCategoryFromSlug(slug: string): string {\n  return slug.split(\"/\")\n    .filter(Boolean)[0]\n}"],"names":["UrlBuilder","_proto","createCategoryUrl","category","this","removeBoundsSlashes","createFoodCategoryUrl","foodCategory","createNeighbourhoodUrl","neighbourhood","sanitized","normalize","toLowerCase","replace","chunk","output","slice","length","keywordToEmojiMap","Map","toEmoji","keyword","get","_ref","title","filters","urlBuilder","React","className","map","c","Link","to","children","titles","visible","setVisibility","onClick","takeAway","pageContext","data","location","site","siteMetadata","allMarkdownRemark","nodes","posts","siteTitle","Error","isFiltered","categoryFolder","onlyGastroPosts","filter","p","fields","slug","includes","publishedPosts","process","GATSBY_DEBUG","post","reduce","frontmatter","foodCategories","add","neighbourhoods","Set","Array","from","values","sort","Layout","id","Bio","Collapse","FiltersList","f","style","listStyle","_ref3","excerpt","date","description","split","Boolean","extractCategoryFromSlug","key","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","Head","Seo"],"sourceRoot":""}